BinarySearch.java
public class BinarySearch {
    Node root;
    Node checkNode;
    Node parent;

    public void addNode(Node newNode) {
        //1st node entered becomes root
        if (root == null) {
            root = newNode;
        }
        else {
            checkNode = root;
            //infinite loop to take the place of recursion, which I prefer not to use if at all possible as it is hard to read
            while (true) {
                parent = checkNode;
                if (newNode.key > checkNode.key) {
                    checkNode = checkNode.rightChild;
                    if (checkNode == null) {
                        parent.rightChild = newNode;
                        return;
                    }
                }
                if (newNode.key < checkNode.key) {
                    //added this to prevent null reference when its not the 1st time through the loop
                    parent = checkNode;
                    checkNode = checkNode.leftChild;
                    if (checkNode == null) {
                        parent.leftChild = newNode;
                        return;
                    }
                } else {
                    //added this to prevent null reference when its not the 1st time through the loop
                    parent = checkNode;
                    checkNode = checkNode.rightChild;
                    if (checkNode == null) {
                        parent.rightChild = newNode;
                        return;
                    }
                }
            }
        }
    }

    public Node fetchStudent(int key) {
        Node currentNode = root;
        while (true) {
            if (currentNode.key == key) {
                return currentNode;
            } else if (key < currentNode.key) {
                currentNode = currentNode.leftChild;
            } else currentNode = currentNode.rightChild;
        }
    }

    public boolean showAllRecords(Node currentNode) {
        if (currentNode == null) {
            System.out.println("No Records to Display" + "\n");
            return true;
        }
        System.out.println("Name: " + currentNode.name + "\n" + "ID: " + currentNode.key + "\n" + "G.P.A: " + currentNode.gpa + "\n");
        //using recursion
        showAllRecords(currentNode.leftChild);
        showAllRecords(currentNode.rightChild);
        return false;
    }
//added this method to try to break some of the logic out of the already massive delete method
    public Node getParent(int key) {
        Node currentNode = root;
        parent = currentNode;
        while (true) {
            if (currentNode.key == key) {
                return parent;
            } else if (key < currentNode.key) {
                parent = currentNode;
                currentNode = currentNode.leftChild;
            } else {
                parent = currentNode;
                currentNode = currentNode.rightChild;
            }
        }
    }

    public void deleteNode(int key) {
        //to handle case when you only have 1 node you are trying to update in list
        if (key == root.key)    {
            root = null;
        }
        else    {
        Node currentNode = root;
        while (true) {
            if (currentNode.key == key) {
                //handles the case when deletedNode has 2 children
                if (currentNode.rightChild != null && currentNode.leftChild != null && currentNode.key < getParent(key).key)    {
                    getParent(currentNode.key).leftChild = currentNode.rightChild;
                    currentNode.rightChild.leftChild = currentNode.leftChild;
                    break;

                }
                if (currentNode.rightChild != null && currentNode.leftChild != null && currentNode.key > getParent(key).key)    {
                    getParent(currentNode.key).rightChild = currentNode.rightChild;
                    currentNode.rightChild.leftChild = currentNode.leftChild;
                    break;

                }
                //handles the case when deletedNode has no children
                if(currentNode.leftChild == null && currentNode.rightChild == null && currentNode.key < getParent(key).key)   {
                    getParent(key).leftChild = null;
                    break;
                }
                if (currentNode.leftChild == null && currentNode.rightChild == null && currentNode.key > getParent(key).key)    {
                   getParent(key).rightChild = null;
                   break;
                }
                //handles case when there is only 1 child on left side of tree
                if (currentNode.leftChild == null && currentNode.key < getParent(key).key) {
                    currentNode = currentNode.rightChild;
                    getParent(key).leftChild = currentNode;
                    break;
                }
                if (currentNode.leftChild == null && currentNode.key > getParent(key).key) {
                    currentNode = currentNode.rightChild;
                    getParent(key).rightChild = currentNode;
                    break;
                }
                //handles case when there is only 1 child on right side of tree
                if (currentNode.rightChild == null && currentNode.key < getParent(key).key) {
                    currentNode = currentNode.leftChild;
                    getParent(key).leftChild = currentNode;
                    break;
                }
                if (currentNode.rightChild == null && currentNode.key > getParent(key).key) {
                    currentNode = currentNode.leftChild;
                    getParent(key).rightChild = currentNode;
                    break;
                }
            }
            else if (key < currentNode.key) {
                currentNode = currentNode.leftChild;
            }
            else {
                currentNode = currentNode.rightChild;
            }
        }
        }
        System.out.println("Record deleted successfully!" + "\n");
    }

    public void updateNode(int key, Node newStudent) {
        deleteNode(key);
        addNode(newStudent);
    }
}
Node.java
public class Node {
    Node leftChild, rightChild;
    String name;
    int key;
    double gpa;

    public Node(int Key, String Name, double GPA)    {
        key = Key;
        name = Name;
        gpa = GPA;
    }
}

Driver.java

import java.util.Scanner;

public class Driver {
    public static void main(String[] args) {
        displayClassInfo();
        int choice = 0;

        BinarySearch binarySearch = new BinarySearch();
        Node newStudent;
        while (choice != 6) {
            //Guess I havent quite gotten scanner objects down they keep exhibiting unexpected behavior, sorry for newing up 2 of them
            Scanner input = new Scanner(System.in);
            Scanner scanner = new Scanner(System.in);
            runMenu();
            choice = scanner.nextInt();
            if (choice == 1) {
                System.out.println("Enter name");
                String studentName = input.nextLine();
                System.out.println("Enter student ID");
                int studentId = input.nextInt();
                System.out.println("Enter student G.P.A");
                double studentGpa = input.nextDouble();
                newStudent = new Node(studentId,studentName,studentGpa);
                binarySearch.addNode(newStudent);
            }
            if (choice == 2) {
                System.out.println("Enter the student ID number");
               int studentFind = input.nextInt();
               Node student = binarySearch.fetchStudent(studentFind);
                System.out.println("Student Name: " + student.name + "\nStudent ID: " + student.key + "\n" + "Student G.P.A.: " + student.gpa + "\n");

            }
            if (choice == 3) {
                System.out.println("Enter the ID of the student you wish to delete");
                int deleteStudent = input.nextInt();
                binarySearch.deleteNode(deleteStudent);

            }
            if (choice == 4) {
                System.out.println("Enter student's ID you wish to update");
                int updateStudentId = input.nextInt();
                System.out.println("Enter new student's name");
                String updateStudentName = input.next();
                System.out.println("Enter new student's ID");
                int newStudentId = input.nextInt();
                System.out.println("Enter new student's GPA");
                double newStudentGpa = input.nextDouble();
                newStudent = new Node(newStudentId,updateStudentName,newStudentGpa);
                binarySearch.updateNode(updateStudentId, newStudent);

            }
            if (choice == 5) {
                //must pass it the root as a parameter to serve as a starting point
                binarySearch.showAllRecords(binarySearch.root);
            }
        }
    }

    public static void displayClassInfo() {

        System.out.println(" IT 2660 Data Structures and Algorithms,");

    }
    public static void runMenu()    {
        System.out.println("Enter: 1 to add a new student\n" +
                " \t\t2 to lookup a student\n" +
                "\t\t3 to delete a student record\n" +
                "\t\t4 to update a student's information\n" +
                "\t\t5 to output all student records\n" +
                "\t\t6 to exit the program");
    }
}
